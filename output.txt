
> result-ts@0.5.2-beta test /home/greg/Workspace/result-ts
> vitest --config vitest.config.ts


 DEV  v3.2.4 /home/greg/Workspace/result-ts

stdout | tests/bundle-size.test.ts > Bundle Size Tests - README Claims Verification > single function import - should match README claim (~55 bytes)
✅ Single function (ok): 63 bytes (target: ~55 bytes)

stdout | tests/bundle-size.test.ts > Bundle Size Tests - README Claims Verification > basic usage - should match README claim (~107 bytes)
✅ Basic usage: 123 bytes (target: ~107 bytes)

 ✓ tests/core.test.ts (46 tests) 24ms
stdout | tests/bundle-size.test.ts > Bundle Size Tests - README Claims Verification > safe execution - should match README claim (~257 bytes)
✅ Safe execution: 332 bytes (target: ~257 bytes)

 ✓ tests/iter.test.ts (38 tests) 28ms
stdout | tests/bundle-size.test.ts > Bundle Size Tests - README Claims Verification > iter module - should match README claim (~143 bytes)
✅ Iter module: 177 bytes (target: ~143 bytes)

 ✓ tests/utils.test.ts (47 tests) 35ms
stdout | tests/bundle-size.test.ts > Bundle Size Tests - README Claims Verification > batch module - should match README claim (~291 bytes)
✅ Batch module: 291 bytes (target: ~291 bytes)

stdout | tests/bundle-size.test.ts > Bundle Size Tests - README Claims Verification > patterns module - should match README claim (~500 bytes)
✅ Patterns module: 500 bytes (target: ~500 bytes)

stdout | tests/bundle-size.test.ts > Bundle Size Tests - README Claims Verification > schema module - should match README claim (~245 bytes excluding Zod)
✅ Schema module: 189 bytes (target: ~245 bytes, excluding Zod)

stdout | tests/bundle-size.test.ts > Bundle Size Tests - Architecture Verification > core essentials with full feature set
Core essentials (full): 603 bytes

stdout | tests/bundle-size.test.ts > Bundle Size Tests - Architecture Verification > modular imports should be efficient

=== README Bundle Size Claims Verification ===
Name                Actual    Target    Status
--------------------------------------------------

stdout | tests/bundle-size.test.ts > Bundle Size Tests - Architecture Verification > modular imports should be efficient
Single ok           55        55        ✅ PASS

 ✓ tests/schema.test.ts (54 tests) 61ms
stdout | tests/bundle-size.test.ts > Bundle Size Tests - Architecture Verification > modular imports should be efficient
Basic usage         107       107       ✅ PASS

 ✓ tests/batch.test.ts (66 tests) 74ms
stdout | tests/bundle-size.test.ts > Bundle Size Tests - Architecture Verification > modular imports should be efficient
Safe execution      332       257       ✅ PASS

stdout | tests/bundle-size.test.ts > Bundle Size Tests - Architecture Verification > modular imports should be efficient
Data transform      79        143       ✅ PASS

stdout | tests/bundle-size.test.ts > Bundle Size Tests - Architecture Verification > modular imports should be efficient
Array processing    133       291       ✅ PASS

stdout | tests/bundle-size.test.ts > Bundle Size Tests - Architecture Verification > modular imports should be efficient
Advanced patterns   269       500       ✅ PASS

stdout | tests/bundle-size.test.ts > Bundle Size Tests - Architecture Verification > modular imports should be efficient
Validation          189       245       ✅ PASS

 ❯ tests/patterns.test.ts (50 tests | 4 failed) 112ms
   ✓ Patterns Module - Advanced Functional Patterns > safe() > should execute successful generator operations 4ms
   ✓ Patterns Module - Advanced Functional Patterns > safe() > should early exit on first error 2ms
   ✓ Patterns Module - Advanced Functional Patterns > safe() > should handle multiple operations with early exit 1ms
   ✓ Patterns Module - Advanced Functional Patterns > safe() > should work with complex data flows 1ms
   ✓ Patterns Module - Advanced Functional Patterns > safe() > should handle empty generators 1ms
   ✓ Patterns Module - Advanced Functional Patterns > safe() > should handle single operation generators 0ms
   ✓ Patterns Module - Advanced Functional Patterns > safe() > should handle different error types 1ms
   ✓ Patterns Module - Advanced Functional Patterns > safe() > should handle generators that throw regular errors 1ms
   ✓ Patterns Module - Advanced Functional Patterns > safe() > should handle cleanup on early exit 1ms
   ✓ Patterns Module - Advanced Functional Patterns > safe() > should work with nested function calls 0ms
   ✓ Patterns Module - Advanced Functional Patterns > safeAsync() > should execute successful async generator operations 2ms
   ✓ Patterns Module - Advanced Functional Patterns > safeAsync() > should early exit on first async error 2ms
   ✓ Patterns Module - Advanced Functional Patterns > safeAsync() > should handle mixed sync and async operations 2ms
   ✓ Patterns Module - Advanced Functional Patterns > safeAsync() > should handle async generators that throw 1ms
   ✓ Patterns Module - Advanced Functional Patterns > safeAsync() > should handle async cleanup on early exit 1ms
   ✓ Patterns Module - Advanced Functional Patterns > safeAsync() > should work with real async patterns like fetch 5ms
   ✓ Patterns Module - Advanced Functional Patterns > safeAsync() > should preserve async operation timing 32ms
   ✓ Patterns Module - Advanced Functional Patterns > yieldFn() > should return the same Result it receives 0ms
   × Patterns Module - Advanced Functional Patterns > yieldFn() > should work in generator context 8ms
     → yield* (intermediate value)(intermediate value) is not iterable
   × Patterns Module - Advanced Functional Patterns > yieldFn() > should make generator syntax cleaner 1ms
     → yield* (intermediate value)(intermediate value)(intermediate value) is not iterable
   ✓ Patterns Module - Advanced Functional Patterns > zip() > should combine two successful Results into tuple 4ms
   ✓ Patterns Module - Advanced Functional Patterns > zip() > should return first error if first Result fails 0ms
   ✓ Patterns Module - Advanced Functional Patterns > zip() > should return second error if first succeeds but second fails 0ms
   ✓ Patterns Module - Advanced Functional Patterns > zip() > should return first error if both fail 0ms
   ✓ Patterns Module - Advanced Functional Patterns > zip() > should work with different value types 0ms
   ✓ Patterns Module - Advanced Functional Patterns > zip() > should work with different error types 0ms
   ✓ Patterns Module - Advanced Functional Patterns > zip() > should be useful for validation scenarios 0ms
   ✓ Patterns Module - Advanced Functional Patterns > zip() > should preserve reference equality 0ms
   ✓ Patterns Module - Advanced Functional Patterns > apply() > should apply a function to a value when both are successful 0ms
   ✓ Patterns Module - Advanced Functional Patterns > apply() > should return function error if function Result fails 0ms
   ✓ Patterns Module - Advanced Functional Patterns > apply() > should return value error if value Result fails 0ms
   ✓ Patterns Module - Advanced Functional Patterns > apply() > should return function error if both fail 0ms
   ✓ Patterns Module - Advanced Functional Patterns > apply() > should work with curried functions 1ms
   ✓ Patterns Module - Advanced Functional Patterns > apply() > should work with complex function transformations 0ms
   ✓ Patterns Module - Advanced Functional Patterns > apply() > should work with validation functions 0ms
   ✓ Patterns Module - Advanced Functional Patterns > apply() > should work with different function types 0ms
   ✓ Patterns Module - Advanced Functional Patterns > apply() > should maintain type safety 0ms
   ✓ Patterns Module - Advanced Functional Patterns > Integration Tests > should work together in complex workflows 1ms
   ✓ Patterns Module - Advanced Functional Patterns > Integration Tests > should work with safe() and zip() together 1ms
   × Patterns Module - Advanced Functional Patterns > Integration Tests > should work with safeAsync() and apply() together 19ms
     → expected { Object (type, value) } to deeply equal { type: 'Ok', value: { …(3) } }
   × Patterns Module - Advanced Functional Patterns > Integration Tests > should handle complex real-world scenarios 6ms
     → expected { type: 'Ok', value: 1751072477223 } to deeply equal { type: 'Ok', value: { …(3) } }
   ✓ Patterns Module - Advanced Functional Patterns > Error Handling and Edge Cases > should handle generators with no yields 0ms
   ✓ Patterns Module - Advanced Functional Patterns > Error Handling and Edge Cases > should handle async generators with no yields 5ms
   ✓ Patterns Module - Advanced Functional Patterns > Error Handling and Edge Cases > should handle nested Result types 0ms
   ✓ Patterns Module - Advanced Functional Patterns > Error Handling and Edge Cases > should preserve error object references 0ms
   ✓ Patterns Module - Advanced Functional Patterns > Error Handling and Edge Cases > should handle undefined and null values correctly 0ms
   ✓ Patterns Module - Advanced Functional Patterns > Error Handling and Edge Cases > should handle large generator chains efficiently 1ms
   ✓ Patterns Module - Advanced Functional Patterns > Error Handling and Edge Cases > should handle early exit in large chains 1ms
   ✓ Patterns Module - Advanced Functional Patterns > Type Safety > should maintain proper type inference 0ms
   ✓ Patterns Module - Advanced Functional Patterns > Type Safety > should work with generic constraints 0ms
stdout | tests/bundle-size.test.ts > Bundle Size Tests - Architecture Verification > tree-shaking effectiveness

=== Tree-Shaking Effectiveness ===
Full import:    1289 bytes
Partial import: 107 bytes
Single import:  55 bytes
Tree-shaking efficiency: 95.7% size reduction

stdout | tests/bundle-size.test.ts > Bundle Size Tests - Architecture Verification > cross-module imports should not duplicate code

=== Cross-Module Import Optimization ===
Separate imports: 143 bytes
Direct iter import: 143 bytes

stdout | tests/bundle-size.test.ts > Bundle Size Tests - Architecture Verification > unused imports are eliminated

=== Unused Import Elimination ===
Used only: 105 bytes
With unused: 105 bytes

stdout | tests/bundle-size.test.ts > Bundle Size Tests - Regression Prevention > README claims should remain accurate

=== README Claims Regression Test ===

stdout | tests/bundle-size.test.ts > Bundle Size Tests - Regression Prevention > README claims should remain accurate
Single function: 55 bytes (max: 75)

stdout | tests/bundle-size.test.ts > Bundle Size Tests - Regression Prevention > README claims should remain accurate
Basic usage: 107 bytes (max: 130)

stdout | tests/bundle-size.test.ts > Bundle Size Tests - Regression Prevention > README claims should remain accurate
Safe execution: 332 bytes (max: 350)

stdout | tests/bundle-size.test.ts > Bundle Size Tests - Regression Prevention > README claims should remain accurate
Data transformation: 79 bytes (max: 180)

stdout | tests/bundle-size.test.ts > Bundle Size Tests - Regression Prevention > README claims should remain accurate
Array processing: 133 bytes (max: 350)

stdout | tests/bundle-size.test.ts > Bundle Size Tests - Regression Prevention > README claims should remain accurate
Advanced patterns: 269 bytes (max: 600)

 ✓ tests/bundle-size.test.ts (13 tests) 181ms

 Test Files  1 failed | 6 passed (7)
      Tests  4 failed | 310 passed (314)
   Start at  18:01:16
   Duration  725ms (transform 665ms, setup 0ms, collect 1.38s, tests 515ms, environment 2ms, prepare 691ms)

 FAIL  Tests failed. Watching for file changes...
       press h to show help, press q to quit
Cancelling test run. Press CTRL+c again to exit forcefully.

 ELIFECYCLE  Test failed. See above for more details.
