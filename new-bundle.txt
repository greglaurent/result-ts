
> result-ts@0.4.0-beta test:bundle /home/greg/Workspace/result-ts
> pnpm build && vitest run tests/bundle-size.test.ts


> result-ts@0.4.0-beta build /home/greg/Workspace/result-ts
> pnpm clean && tsc && tsc-alias


> result-ts@0.4.0-beta clean /home/greg/Workspace/result-ts
> rm -rf dist


 RUN  v3.2.4 /home/greg/Workspace/result-ts

stdout | tests/bundle-size.test.ts > Bundle Size Tests - Layered Architecture > core essentials (result-ts) should stay minimal
Bundle analysis: {
  inputs: {
    [32m'dist/base.js'[39m: { bytes: [33m32332[39m, imports: [], format: [32m'esm'[39m },
    [32m'dist/core.js'[39m: { bytes: [33m1115[39m, imports: [36m[Array][39m, format: [32m'esm'[39m },
    [32m'dist/index.js'[39m: { bytes: [33m664[39m, imports: [36m[Array][39m, format: [32m'esm'[39m },
    [32m'<stdin>'[39m: { bytes: [33m140[39m, imports: [36m[Array][39m, format: [32m'esm'[39m }
  },
  outputs: {
    [32m'stdin.js'[39m: {
      imports: [],
      exports: [],
      entryPoint: [32m'<stdin>'[39m,
      inputs: [36m[Object][39m,
      bytes: [33m255[39m
    }
  }
}

stdout | tests/bundle-size.test.ts > Bundle Size Tests - Layered Architecture > iter layer (core + iteration) should be reasonable
Bundle analysis: {
  inputs: {
    [32m'dist/base.js'[39m: { bytes: [33m32332[39m, imports: [], format: [32m'esm'[39m },
    [32m'dist/iter.js'[39m: { bytes: [33m1110[39m, imports: [36m[Array][39m, format: [32m'esm'[39m },
    [32m'<stdin>'[39m: { bytes: [33m121[39m, imports: [36m[Array][39m, format: [32m'esm'[39m }
  },
  outputs: {
    [32m'stdin.js'[39m: {
      imports: [],
      exports: [],
      entryPoint: [32m'<stdin>'[39m,
      inputs: [36m[Object][39m,
      bytes: [33m268[39m
    }
  }
}

stdout | tests/bundle-size.test.ts > Bundle Size Tests - Layered Architecture > iter layer (core + iteration) should be reasonable
Iter layer: 268 bytes

stdout | tests/bundle-size.test.ts > Bundle Size Tests - Layered Architecture > batch layer (core + batch) should be efficient
Bundle analysis: {
  inputs: {
    [32m'dist/base.js'[39m: { bytes: [33m32332[39m, imports: [], format: [32m'esm'[39m },
    [32m'dist/core.js'[39m: { bytes: [33m1115[39m, imports: [36m[Array][39m, format: [32m'esm'[39m },
    [32m'dist/batch.js'[39m: { bytes: [33m921[39m, imports: [36m[Array][39m, format: [32m'esm'[39m },
    [32m'<stdin>'[39m: { bytes: [33m132[39m, imports: [36m[Array][39m, format: [32m'esm'[39m }
  },
  outputs: {
    [32m'stdin.js'[39m: {
      imports: [],
      exports: [],
      entryPoint: [32m'<stdin>'[39m,
      inputs: [36m[Object][39m,
      bytes: [33m451[39m
    }
  }
}

stdout | tests/bundle-size.test.ts > Bundle Size Tests - Layered Architecture > batch layer (core + batch) should be efficient
Batch layer: 451 bytes

stdout | tests/bundle-size.test.ts > Bundle Size Tests - Layered Architecture > utils layer (core + utilities) should be small
Bundle analysis: {
  inputs: {
    [32m'dist/base.js'[39m: { bytes: [33m32332[39m, imports: [], format: [32m'esm'[39m },
    [32m'dist/utils.js'[39m: { bytes: [33m1119[39m, imports: [36m[Array][39m, format: [32m'esm'[39m },
    [32m'<stdin>'[39m: { bytes: [33m138[39m, imports: [36m[Array][39m, format: [32m'esm'[39m }
  },
  outputs: {
    [32m'stdin.js'[39m: {
      imports: [],
      exports: [],
      entryPoint: [32m'<stdin>'[39m,
      inputs: [36m[Object][39m,
      bytes: [33m281[39m
    }
  }
}

stdout | tests/bundle-size.test.ts > Bundle Size Tests - Layered Architecture > utils layer (core + utilities) should be small
Utils layer: 281 bytes

stdout | tests/bundle-size.test.ts > Bundle Size Tests - Layered Architecture > patterns layer (core + advanced) should be controlled
Bundle analysis: {
  inputs: {
    [32m'dist/base.js'[39m: { bytes: [33m32332[39m, imports: [], format: [32m'esm'[39m },
    [32m'dist/core.js'[39m: { bytes: [33m1115[39m, imports: [36m[Array][39m, format: [32m'esm'[39m },
    [32m'dist/patterns.js'[39m: { bytes: [33m1094[39m, imports: [36m[Array][39m, format: [32m'esm'[39m },
    [32m'<stdin>'[39m: { bytes: [33m121[39m, imports: [36m[Array][39m, format: [32m'esm'[39m }
  },
  outputs: {
    [32m'stdin.js'[39m: {
      imports: [],
      exports: [],
      entryPoint: [32m'<stdin>'[39m,
      inputs: [36m[Object][39m,
      bytes: [33m748[39m
    }
  }
}

stdout | tests/bundle-size.test.ts > Bundle Size Tests - Layered Architecture > patterns layer (core + advanced) should be controlled
Patterns layer: 748 bytes

stdout | tests/bundle-size.test.ts > Bundle Size Tests - Layered Architecture > schema layer (core + validation) should exclude Zod
Bundle analysis: {
  inputs: {
    [32m'dist/base.js'[39m: { bytes: [33m32332[39m, imports: [], format: [32m'esm'[39m },
    [32m'dist/core.js'[39m: { bytes: [33m1115[39m, imports: [36m[Array][39m, format: [32m'esm'[39m },
    [32m'dist/schema.js'[39m: { bytes: [33m7731[39m, imports: [36m[Array][39m, format: [32m'esm'[39m },
    [32m'<stdin>'[39m: { bytes: [33m125[39m, imports: [36m[Array][39m, format: [32m'esm'[39m }
  },
  outputs: {
    [32m'stdin.js'[39m: {
      imports: [36m[Array][39m,
      exports: [],
      entryPoint: [32m'<stdin>'[39m,
      inputs: [36m[Object][39m,
      bytes: [33m356[39m
    }
  }
}

stdout | tests/bundle-size.test.ts > Bundle Size Tests - Layered Architecture > schema layer (core + validation) should exclude Zod
Schema layer: 356 bytes (excluding Zod)

stdout | tests/bundle-size.test.ts > Bundle Size Tests - Layered Architecture > compare layer sizes - should show progression

=== Layer Size Comparison ===

stdout | tests/bundle-size.test.ts > Bundle Size Tests - Layered Architecture > compare layer sizes - should show progression
Bundle analysis: {
  inputs: {
    [32m'dist/base.js'[39m: { bytes: [33m32332[39m, imports: [], format: [32m'esm'[39m },
    [32m'dist/core.js'[39m: { bytes: [33m1115[39m, imports: [36m[Array][39m, format: [32m'esm'[39m },
    [32m'dist/index.js'[39m: { bytes: [33m664[39m, imports: [36m[Array][39m, format: [32m'esm'[39m },
    [32m'<stdin>'[39m: { bytes: [33m80[39m, imports: [36m[Array][39m, format: [32m'esm'[39m }
  },
  outputs: {
    [32m'stdin.js'[39m: {
      imports: [],
      exports: [],
      entryPoint: [32m'<stdin>'[39m,
      inputs: [36m[Object][39m,
      bytes: [33m203[39m
    }
  }
}

stdout | tests/bundle-size.test.ts > Bundle Size Tests - Layered Architecture > compare layer sizes - should show progression
Core    :  203 bytes

stdout | tests/bundle-size.test.ts > Bundle Size Tests - Layered Architecture > compare layer sizes - should show progression
Bundle analysis: {
  inputs: {
    [32m'dist/base.js'[39m: { bytes: [33m32332[39m, imports: [], format: [32m'esm'[39m },
    [32m'dist/utils.js'[39m: { bytes: [33m1119[39m, imports: [36m[Array][39m, format: [32m'esm'[39m },
    [32m'<stdin>'[39m: { bytes: [33m74[39m, imports: [36m[Array][39m, format: [32m'esm'[39m }
  },
  outputs: {
    [32m'stdin.js'[39m: {
      imports: [],
      exports: [],
      entryPoint: [32m'<stdin>'[39m,
      inputs: [36m[Object][39m,
      bytes: [33m127[39m
    }
  }
}

stdout | tests/bundle-size.test.ts > Bundle Size Tests - Layered Architecture > compare layer sizes - should show progression
Utils   :  127 bytes

stdout | tests/bundle-size.test.ts > Bundle Size Tests - Layered Architecture > compare layer sizes - should show progression
Bundle analysis: {
  inputs: {
    [32m'dist/base.js'[39m: { bytes: [33m32332[39m, imports: [], format: [32m'esm'[39m },
    [32m'dist/iter.js'[39m: { bytes: [33m1110[39m, imports: [36m[Array][39m, format: [32m'esm'[39m },
    [32m'<stdin>'[39m: { bytes: [33m73[39m, imports: [36m[Array][39m, format: [32m'esm'[39m }
  },
  outputs: {
    [32m'stdin.js'[39m: {
      imports: [],
      exports: [],
      entryPoint: [32m'<stdin>'[39m,
      inputs: [36m[Object][39m,
      bytes: [33m139[39m
    }
  }
}

stdout | tests/bundle-size.test.ts > Bundle Size Tests - Layered Architecture > compare layer sizes - should show progression
Iter    :  139 bytes

stdout | tests/bundle-size.test.ts > Bundle Size Tests - Layered Architecture > compare layer sizes - should show progression
Bundle analysis: {
  inputs: {
    [32m'dist/base.js'[39m: { bytes: [33m32332[39m, imports: [], format: [32m'esm'[39m },
    [32m'dist/core.js'[39m: { bytes: [33m1115[39m, imports: [36m[Array][39m, format: [32m'esm'[39m },
    [32m'dist/patterns.js'[39m: { bytes: [33m1094[39m, imports: [36m[Array][39m, format: [32m'esm'[39m },
    [32m'<stdin>'[39m: { bytes: [33m79[39m, imports: [36m[Array][39m, format: [32m'esm'[39m }
  },
  outputs: {
    [32m'stdin.js'[39m: {
      imports: [],
      exports: [],
      entryPoint: [32m'<stdin>'[39m,
      inputs: [36m[Object][39m,
      bytes: [33m539[39m
    }
  }
}

stdout | tests/bundle-size.test.ts > Bundle Size Tests - Layered Architecture > compare layer sizes - should show progression
Patterns:  539 bytes

stdout | tests/bundle-size.test.ts > Bundle Size Tests - Layered Architecture > compare layer sizes - should show progression
Bundle analysis: {
  inputs: {
    [32m'dist/base.js'[39m: { bytes: [33m32332[39m, imports: [], format: [32m'esm'[39m },
    [32m'dist/core.js'[39m: { bytes: [33m1115[39m, imports: [36m[Array][39m, format: [32m'esm'[39m },
    [32m'dist/batch.js'[39m: { bytes: [33m921[39m, imports: [36m[Array][39m, format: [32m'esm'[39m },
    [32m'<stdin>'[39m: { bytes: [33m74[39m, imports: [36m[Array][39m, format: [32m'esm'[39m }
  },
  outputs: {
    [32m'stdin.js'[39m: {
      imports: [],
      exports: [],
      entryPoint: [32m'<stdin>'[39m,
      inputs: [36m[Object][39m,
      bytes: [33m185[39m
    }
  }
}

stdout | tests/bundle-size.test.ts > Bundle Size Tests - Layered Architecture > compare layer sizes - should show progression
Batch   :  185 bytes

stdout | tests/bundle-size.test.ts > Bundle Size Tests - Layered Architecture > compare layer sizes - should show progression
Bundle analysis: {
  inputs: {
    [32m'dist/base.js'[39m: { bytes: [33m32332[39m, imports: [], format: [32m'esm'[39m },
    [32m'dist/core.js'[39m: { bytes: [33m1115[39m, imports: [36m[Array][39m, format: [32m'esm'[39m },
    [32m'dist/schema.js'[39m: { bytes: [33m7731[39m, imports: [36m[Array][39m, format: [32m'esm'[39m },
    [32m'<stdin>'[39m: { bytes: [33m85[39m, imports: [36m[Array][39m, format: [32m'esm'[39m }
  },
  outputs: {
    [32m'stdin.js'[39m: {
      imports: [36m[Array][39m,
      exports: [],
      entryPoint: [32m'<stdin>'[39m,
      inputs: [36m[Object][39m,
      bytes: [33m217[39m
    }
  }
}

stdout | tests/bundle-size.test.ts > Bundle Size Tests - Layered Architecture > compare layer sizes - should show progression
Schema  :  217 bytes

stdout | tests/bundle-size.test.ts > Bundle Size Tests - Layered Architecture > compare layer sizes - should show progression
Bundle analysis: {
  inputs: {
    [32m'dist/base.js'[39m: { bytes: [33m32332[39m, imports: [], format: [32m'esm'[39m },
    [32m'dist/core.js'[39m: { bytes: [33m1115[39m, imports: [36m[Array][39m, format: [32m'esm'[39m },
    [32m'dist/index.js'[39m: { bytes: [33m664[39m, imports: [36m[Array][39m, format: [32m'esm'[39m },
    [32m'<stdin>'[39m: { bytes: [33m80[39m, imports: [36m[Array][39m, format: [32m'esm'[39m }
  },
  outputs: {
    [32m'stdin.js'[39m: {
      imports: [],
      exports: [],
      entryPoint: [32m'<stdin>'[39m,
      inputs: [36m[Object][39m,
      bytes: [33m203[39m
    }
  }
}

stdout | tests/bundle-size.test.ts > Bundle Size Tests - Layered Architecture > compare layer sizes - should show progression
Bundle analysis: {
  inputs: {
    [32m'dist/base.js'[39m: { bytes: [33m32332[39m, imports: [], format: [32m'esm'[39m },
    [32m'dist/utils.js'[39m: { bytes: [33m1119[39m, imports: [36m[Array][39m, format: [32m'esm'[39m },
    [32m'<stdin>'[39m: { bytes: [33m74[39m, imports: [36m[Array][39m, format: [32m'esm'[39m }
  },
  outputs: {
    [32m'stdin.js'[39m: {
      imports: [],
      exports: [],
      entryPoint: [32m'<stdin>'[39m,
      inputs: [36m[Object][39m,
      bytes: [33m127[39m
    }
  }
}

stdout | tests/bundle-size.test.ts > Bundle Size Tests - Layered Architecture > selective imports should tree-shake properly
Bundle analysis: {
  inputs: {
    [32m'dist/base.js'[39m: { bytes: [33m32332[39m, imports: [], format: [32m'esm'[39m },
    [32m'dist/core.js'[39m: { bytes: [33m1115[39m, imports: [36m[Array][39m, format: [32m'esm'[39m },
    [32m'dist/index.js'[39m: { bytes: [33m664[39m, imports: [36m[Array][39m, format: [32m'esm'[39m },
    [32m'<stdin>'[39m: { bytes: [33m258[39m, imports: [36m[Array][39m, format: [32m'esm'[39m }
  },
  outputs: {
    [32m'stdin.js'[39m: {
      imports: [],
      exports: [],
      entryPoint: [32m'<stdin>'[39m,
      inputs: [36m[Object][39m,
      bytes: [33m779[39m
    }
  }
}

stdout | tests/bundle-size.test.ts > Bundle Size Tests - Layered Architecture > selective imports should tree-shake properly
Bundle analysis: {
  inputs: {
    [32m'dist/base.js'[39m: { bytes: [33m32332[39m, imports: [], format: [32m'esm'[39m },
    [32m'dist/core.js'[39m: { bytes: [33m1115[39m, imports: [36m[Array][39m, format: [32m'esm'[39m },
    [32m'dist/index.js'[39m: { bytes: [33m664[39m, imports: [36m[Array][39m, format: [32m'esm'[39m },
    [32m'<stdin>'[39m: { bytes: [33m94[39m, imports: [36m[Array][39m, format: [32m'esm'[39m }
  },
  outputs: {
    [32m'stdin.js'[39m: {
      imports: [],
      exports: [],
      entryPoint: [32m'<stdin>'[39m,
      inputs: [36m[Object][39m,
      bytes: [33m103[39m
    }
  }
}

stdout | tests/bundle-size.test.ts > Bundle Size Tests - Layered Architecture > selective imports should tree-shake properly
Full core import: 779 bytes
Partial import: 103 bytes

 ❯ tests/bundle-size.test.ts (8 tests | 2 failed) 38ms
   × Bundle Size Tests - Layered Architecture > core essentials (result-ts) should stay minimal 9ms
     → expected 255 to be less than 250
   ✓ Bundle Size Tests - Layered Architecture > iter layer (core + iteration) should be reasonable 2ms
   ✓ Bundle Size Tests - Layered Architecture > batch layer (core + batch) should be efficient 3ms
   ✓ Bundle Size Tests - Layered Architecture > utils layer (core + utilities) should be small 2ms
   ✓ Bundle Size Tests - Layered Architecture > patterns layer (core + advanced) should be controlled 2ms
   ✓ Bundle Size Tests - Layered Architecture > schema layer (core + validation) should exclude Zod 2ms
   × Bundle Size Tests - Layered Architecture > compare layer sizes - should show progression 13ms
     → expected 203 to be less than 177
   ✓ Bundle Size Tests - Layered Architecture > selective imports should tree-shake properly 3ms

 Test Files  1 failed (1)
      Tests  2 failed | 6 passed (8)
   Start at  16:14:32
   Duration  184ms (transform 19ms, setup 0ms, collect 20ms, tests 38ms, environment 0ms, prepare 36ms)

 ELIFECYCLE  Command failed with exit code 1.
